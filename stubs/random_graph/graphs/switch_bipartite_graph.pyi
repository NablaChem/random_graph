import typing
from typing import Any

class SwitchBipartiteGraph:
    neighborhoods: Any = ...
    def __init__(self, nx: int, ny: int, edges: typing.Iterable[typing.Tuple[int, int]]) -> None: ...
    @property
    def nx(self): ...
    @property
    def ny(self): ...
    @property
    def edges(self) -> typing.Iterator[typing.Tuple[int, int]]: ...
    @property
    def degree_sequence(self) -> typing.Dict[str, typing.Tuple[int]]: ...
    @staticmethod
    def from_degree_sequence(dx: typing.Sequence[int], dy: typing.Sequence[int]) -> SwitchBipartiteGraph: ...
    def simple(self) -> bool: ...
    def __eq__(self, other: Any) -> Any: ...
    def neighbourhoods(self, side: str) -> typing.List[typing.Set[int]]: ...
    def switch(self) -> bool: ...
