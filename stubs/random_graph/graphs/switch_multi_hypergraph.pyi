import typing
from typing import Any

class SwitchMultiHypergraph:
    def __init__(self, n: int, edges: typing.Iterable[typing.Set[int]]) -> None: ...
    @property
    def n(self): ...
    @property
    def m(self): ...
    @property
    def edges(self) -> typing.Iterator[typing.Set[int]]: ...
    @property
    def degree_sequence(self) -> typing.Tuple[int]: ...
    @property
    def edge_sizes(self) -> typing.Tuple[int]: ...
    @staticmethod
    def from_degree_sequence(degree_sequence: typing.Sequence[int], edge_sequence: typing.Sequence[int]) -> SwitchMultiHypergraph: ...
    def __eq__(self, other: Any) -> Any: ...
    def simple(self) -> bool: ...
    def switch(self) -> bool: ...
