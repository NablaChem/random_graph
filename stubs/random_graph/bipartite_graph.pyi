import typing
from typing import Any

NodeType: Any

class SwitchBipartiteGraph:
    nodes: Any = ...
    edges: Any = ...
    def __init__(self, nodes_x: typing.Union[int, typing.List[NodeType]], nodes_y: typing.Union[int, typing.List[NodeType]], edges: typing.Sequence[typing.Tuple[NodeType, NodeType]]) -> None: ...
    @property
    def order(self): ...
    @property
    def m(self): ...
    @property
    def simple(self) -> bool: ...
    def __eq__(self, other: Any) -> Any: ...
    def neighbourhoods(self) -> typing.Dict[str, typing.List[typing.List[NodeType]]]: ...
    def remove_edge(self, edge: typing.Optional[typing.Tuple[NodeType, NodeType]]=..., index: typing.Optional[int]=...) -> None: ...
    def add_edge(self, edge: typing.Tuple[NodeType, NodeType], test: bool=...) -> None: ...
    def switch(self) -> bool: ...
